$(document).ready(function () {
  // foo
  var SLIDE_TEMPO = 500;

  // auto active
  $('a[href="' + this.location.pathname + '"]').parent().addClass('active');

  // init popovers
  $('body').popover({
    selector: '[data-toggle=popover]',
    container: 'body'
  });

  function enableFancyLoginAndRegisterNavbarForm(type) {
    // show
    $('.toggle-forms a.' + type).click(function(event) {
      event.preventDefault();
      $(this).parents('.toggle-forms').addClass("collapse");
      $('.navbar-form.' + type).removeClass("collapse");
      $('.navbar-form.' + type).find('input[name="username"]').focus();
    });

    // cancel
    $('.navbar-form.' + type + ' .reset').click(function(event) {
      $(this).parents('.navbar-form').addClass("collapse");
      $('#main-nav .toggle-forms').removeClass("collapse");
    });
  }

  enableFancyLoginAndRegisterNavbarForm('login');
  enableFancyLoginAndRegisterNavbarForm('register');

  function initializeNewGameRound(result) {
    // deconstruct result
    var currentQuestion = $.parseJSON(result.current_question)
    // var newGameId = result.id;
    var newQuestion = currentQuestion.question_text;
    var newQuestionId = currentQuestion.id;
    var newProgress = result.current_progress;
    var newPoints = result.current_points;
    var newChoices = currentQuestion.products;

    // get elements
    var $wrapper = $('#fiftycent');
    var $question = $('.question.row').children('h1');
    var $products = $('.products.row');
    var $choices = $products.children('.game-link');
    var $progress = $('.progress-bar');

    // update question
    var $smallQuestionExtension = $('<small />').text(' <%= t.game.measurement %>');
    $question.text(newQuestion).append($smallQuestionExtension);

    // update progessbar
    $progress.attr('aria-valuenow', newProgress)
             .data('points', newPoints)
             .css('width', newProgress+'%')
             .text(newPoints + ' <%= t.game.points %>');

    // update choices
    $choices.each(function(index) {
      var newChoice = $.parseJSON(newChoices[index]);
      var newChoiceId = newChoice.id;

      $(this).data('question', newQuestionId);
      $(this).data('id', newChoiceId);

      $image = $(this).children('img');
      $image.slideUp(SLIDE_TEMPO, function() {
        $(this).attr('src', newChoice.imgurl)
               .attr('alt', newChoice.name)
               .delay(500)
               .slideDown(SLIDE_TEMPO);
      });

      $name = $(this).children('h3');
      $name.slideUp(SLIDE_TEMPO, function() {
        $(this).text(newChoice.name)
               .delay(500)
               .slideDown(SLIDE_TEMPO);
      });
    });
  }

  function showAlertAndInitializeNewGameRound(message, type) {
    $messages = $('#messages');

    $alert = $('<div />').addClass('alert')
                         .addClass('alert-' + type)
                         .attr('role', 'alert')
                         .text(message)
                         .hide();

    $alert.appendTo($messages).slideDown(SLIDE_TEMPO, function() {
      $.getJSON('/json/play', initializeNewGameRound);

      $(this).delay(1000).slideUp(SLIDE_TEMPO, function() { $(this).remove(); });
    });
  }

  function handlePlayAPIAnswer(data) {
    var answer = $.parseJSON(data);
    if (answer.correct === true) {
      showAlertAndInitializeNewGameRound(wonMessages[Math.floor(Math.random() * wonMessages.length)], 'success');
    } else {
      showAlertAndInitializeNewGameRound(lostMessages[Math.floor(Math.random() * lostMessages.length)], 'danger');
    }
  }

  function handleFinalPlayAPIAnswer(data) {
    var answer = $.parseJSON(data);

    var $wrapper = $('#fiftycent');
    var currentPoints = $('.progress-bar').data('points');

    if (answer.correct === true) {
      finalPoints = currentPoints + 100;
    } else {
      finalPoints = currentPoints - 200;
    }

    var finalColor = '#3c763d';

    if (finalPoints < 0) {
      finalColor = '#a94442';
    };

    $finalMessage = $('<h1 />').text('<%= t.game.message.final %>' + finalPoints)
                               .css('color', finalColor);

    $wrapper.before($finalMessage)
            .slideUp(SLIDE_TEMPO, function() {
              $(this).remove();
            });
  }

  function enableEvenFancierGameLinksSoYouCanActuallyPlayNow($link) {
    $link.click(function(event) {
      event.preventDefault();

      var gameId = $link.data('game');
      var questionId = $link.data('question');
      var productId = $link.data('id');

      var currentProgress = parseInt($('.progress-bar').attr('aria-valuenow'));

      var answer = {
        game: gameId,
        question: questionId,
        guess: productId
      };

      if (currentProgress > 90) {
        $.post('/play', answer).done(handleFinalPlayAPIAnswer);
      } else {
        $.post('/play', answer).done(handlePlayAPIAnswer);
      }
    });
  }

  $('.game-link').each(function() {
    enableEvenFancierGameLinksSoYouCanActuallyPlayNow($(this));
  });

  function drawStatsCharts(stats) {
    var chartColors = { '<%= t.stats.won %>': '#3c763d',
                        '<%= t.stats.lost %>': '#a94442' };

    var chartToday = c3.generate({
      bindto: '#chart-today',
      data: {
          columns: [
              ['<%= t.stats.won %>', stats.today.won],
              ['<%= t.stats.lost %>', stats.today.lost]
          ],
          type : 'donut',
          colors: chartColors
      },
      donut: {
          title: '<%= t.stats.timespan.today %>'
      }
    });

    var chartLastWeek = c3.generate({
      bindto: '#chart-last-week',
      data: {
          columns: [
              ['<%= t.stats.won %>', stats.lastWeek.won],
              ['<%= t.stats.lost %>', stats.lastWeek.lost]
          ],
          type : 'donut',
          colors: chartColors
      },
      donut: {
          title: '<%= t.stats.timespan.lastWeek %>'
      }
    });

    var chartOverall = c3.generate({
      bindto: '#chart-overall',
      data: {
        columns: [
          ['<%= t.stats.won %>', stats.overall.won],
          ['<%= t.stats.lost %>', stats.overall.lost]
        ],
        type : 'donut',
        colors: chartColors
      },
      donut: {
        title: '<%= t.stats.timespan.overall %>'
      }
    });
  }

  if (window.statsData) {
    drawStatsCharts(window.statsData);
  }


});
